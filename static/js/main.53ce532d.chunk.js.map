{"version":3,"sources":["components/NavigationBar.jsx","components/BookUploadForm.jsx","services/addNewUserBook.js","components/Line.jsx","constants.js","components/EditBookSideBar.jsx","components/TriggersPopUp.jsx","components/EditLinePopUp.jsx","components/EditBookScreen.jsx","components/ReadBook.jsx","components/Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["React","memo","props","useState","pathName","setPathName","useEffect","currentPath","renderInactiveNavLink","text","to","className","href","src","process","map","i","key","renderActiveNavLink","errMessage","setErrMessage","isLoading","setIsLoading","docFile","setDocFile","bookName","setBookName","toEdit","setToEdit","handleSubmit","a","console","debug","arrayBuffer","mammoth","convertToHtml","result","html","value","setBookContent","from","type","placeholder","onChange","e","target","id","fileName","files","name","test","hidden","onClick","disabled","lineClass","line","header","addClass","title","alt","onEditLineClick","onLineClick","dangerouslySetInnerHTML","__html","DISPLAY","FILTER","SPLIT_PATTERN","HTML_TEXT_DECORATION_TAGS","TRIGGER_TYPE","TO_COLOR_CSS_STRING","color","r","g","b","setDisplay","display","setSplitPattern","splitPattern","setFilter","filter","triggers","length","trigger","style","backgroundColor","property","renderTriggerProperty","closePopUp","STAGES","defaultColorWhite","stage","setStage","triggerName","setTriggerName","triggerType","setTriggerType","file","setFile","setColor","errorMessage","setErrorMessage","handleNextToChooseProperty","validName","forEach","chooseAndSetValueStage","isPropertyColor","handleFinishAddingTrigger","onAddTrigger","renderStageInitial","htmlFor","checked","isLineHeader","onToggleHeaderStatus","onRemoveTrigger","rgb","error","renderStage","bookContent","logicalLines","setLogicalLines","menuLineId","setMenuLineId","menuSentenceId","setMenuSentenceId","menuLineHtml","setMenuLineHtml","menuTriggers","setMenuTriggers","setIsLineHeader","showTriggersPopUp","setShowTriggersPopUp","showEditLinePopUp","setShowEditLinePopUp","isSentenceHeader","sentencePartsList","firstPart","getHtmlTagsRegex","matchStr","tag","split","join","replace","RegExp","getPartsAccordingToHtmlTags","lineList","currentlyOpenTags","returnList","sentence","sentenceSplitList","returnSentenceList","j","match","tagName","index","indexOf","splice","push","tags","parts","sentenceId","lineLists","lineListsSplitToParts","lineHtml","content","lineId","setBookData","prepareAndSetLogicalLines","setSelectedLineProperties","handleLineClick","toggleShowTriggersPopUp","handleLineEditClick","toggleShowEditLinePopUp","createLine","renderSentences","l","htmlSentence","part","slice","reverse","getSentenceHtml","getLineTriggers","currSentence","concat","getIsLineHeader","renderLines","htmlLine","getLineHtml","changeTriggersListInState","changeTriggerListFunc","isRemove","logicalLinesDeepCopy","CloneDeep","lineCopy","triggersListCopy","currentHeaderStatus","currTrigger","bookData","textClassName","location","useLocation","pathname","exact","path","warn","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.53ce532d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./NavigationBar.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavigationBar = (props) => {\r\n  const [pathName, setPathName] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const currentPath = props.pathName;\r\n    setPathName(currentPath);\r\n  }, [props.pathName]);\r\n\r\n  const handleCollapseNavBar = () => {\r\n    console.error(\"handleCollapseNavBar not implemented\");\r\n  };\r\n\r\n  const renderActiveNavLink = (text) => {\r\n    return <div className=\"link-active\">{text}</div>;\r\n  };\r\n\r\n  const renderInactiveNavLink = (text, to) => {\r\n    return (\r\n      <Link to={to}>\r\n        <div className=\"link\">{text}</div>\r\n      </Link>\r\n    );\r\n  };\r\n\r\n  const navLinks = [\r\n    { text: \"About\", to: \"/about\" },\r\n    { text: \"Upload a New Book File\", to: \"/upload\" },\r\n    { text: \"Edit Book Triggers\", to: \"/edit\" },\r\n    { text: \"Preview Read Book\", to: \"/preview\" },\r\n    { text: \"Contact Us\", to: \"/contact\" },\r\n  ];\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"navbar-header\">\r\n          {/* <button\r\n            type=\"button\"\r\n            className=\"navbar-toggle\"\r\n            onClick={handleCollapseNavBar}\r\n          >\r\n            <span className=\"icon-bar\"></span>\r\n            <span className=\"icon-bar\"></span>\r\n            <span className=\"icon-bar\"></span>\r\n          </button> */}\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            <img\r\n              src={`${process.env.PUBLIC_URL}/images/temp_logo.png`}\r\n              className=\"logo-img\"\r\n            />\r\n          </a>\r\n        </div>\r\n        {navLinks.map(({ text, to }, i) => (\r\n          <li key={i}>\r\n            {to === pathName\r\n              ? renderActiveNavLink(text)\r\n              : renderInactiveNavLink(text, to)}\r\n          </li>\r\n        ))}\r\n        <ul className=\"nav navbar-nav\"></ul>\r\n        <ul className=\"nav navbar-nav navbar-right\">\r\n          <li>{renderInactiveNavLink(\"Login\", \"/login\")}</li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default React.memo(NavigationBar);\r\n","import React, { useState, Fragment } from \"react\";\r\nimport \"./BookUploadForm.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport mammoth from \"mammoth\";\r\nimport addNewBook from \"../services/addNewUserBook\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst BookUploadForm = (props) => {\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [docFile, setDocFile] = useState(null);\r\n  const [bookName, setBookName] = useState(\"\");\r\n  const [toEdit, setToEdit] = useState(false);\r\n\r\n  const handleSubmit = async () => {\r\n    setIsLoading(true);\r\n    addNewBook();\r\n    // Save file in server (if I'll need it in the future):\r\n    // const fd = new FormData();\r\n    // fd.append(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", this.docFile, this.docFile.name);\r\n    // const res = await axios.post(url, fd, {\r\n    //   onUploadProgress: (progressEvent) => {\r\n    //     console.log(\r\n    //       \"Upload progress:\",\r\n    //       Math.round((progressEvent.loaded / progressEvent.total) * 100) + \"%\"\r\n    //     );\r\n    //   },\r\n    // });\r\n    // console.log(res);\r\n\r\n    // Convert and get the docx as html\r\n    const arrayBuffer = await docFile.arrayBuffer();\r\n    // const result = await mammoth.extractRawText({ arrayBuffer });\r\n    // const text = result.value;\r\n    // console.log(text);\r\n    const result = await mammoth.convertToHtml({ arrayBuffer });\r\n    const html = result.value;\r\n    setToEdit(true);\r\n    props.setBookContent(html);\r\n  };\r\n\r\n  const handleChangeFile = (e) => {\r\n    const fileName = e.target.files[0].name;\r\n    const docPattern = /.*.docx/;\r\n    if (docPattern.test(fileName)) {\r\n      setDocFile(e.target.files[0]);\r\n      setErrMessage(\"\");\r\n    } else {\r\n      setDocFile(null);\r\n      setErrMessage(\"Please only select a file ending with .docx\");\r\n    }\r\n  };\r\n\r\n  if (toEdit) {\r\n    return <Redirect from=\"/upload\" to=\"edit\" />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"menu-bg\">\r\n        <div className=\"menu-window\">\r\n          <div className=\"menu\">\r\n            <h4 className=\"menu-header\">Welcome to Interactive Book Editor!</h4>\r\n            <input\r\n              className=\"col form-control mt-4 mb-3\"\r\n              type=\"text\"\r\n              placeholder=\"New Book Name\"\r\n              value={bookName}\r\n              onChange={(e) => setBookName(e.target.value)}\r\n            />\r\n            <div className=\"custom-file mb-2\">\r\n              <input\r\n                type=\"file\"\r\n                className=\"custom-file-input\"\r\n                id=\"inputGroupFile01\"\r\n                onChange={handleChangeFile}\r\n              />\r\n              <label className=\"custom-file-label\">\r\n                {docFile ? docFile.name : \"Choose a docx file\"}\r\n              </label>\r\n              <li>\r\n                <h6>\r\n                  <span\r\n                    className=\"badge badge-danger mt-2\"\r\n                    hidden={!errMessage}\r\n                  >\r\n                    {errMessage}\r\n                  </span>\r\n                </h6>\r\n              </li>\r\n            </div>\r\n            <button\r\n              onClick={handleSubmit}\r\n              className=\"btn btn-success form-control mt-3\"\r\n              disabled={isLoading || !docFile || !bookName}\r\n            >\r\n              {isLoading ? \"Please wait...\" : \"Load Book\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(BookUploadForm);\r\n","// import { SendRequest } from \"../apiUtils\";\r\n// import axios from \"axios\";\r\n\r\nexport default (authToken, bookData) => {\r\n  console.debug(\"not implemented addNewUserBook service\");\r\n};\r\n","import React from \"react\";\r\nimport \"./Line.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst Line = (props) => {\r\n  const lineClass = `line line-text ${props.line.header ? \"header\" : \"\"}`;\r\n  const addClass = `line edit-img ${props.line.header ? \"header\" : \"\"}`;\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <img\r\n        className={addClass}\r\n        title=\"Edit Properties\"\r\n        src={`${process.env.PUBLIC_URL}/images/edit.png`}\r\n        alt=\"Edit Line Properties\"\r\n        onClick={() => props.onEditLineClick(props.line)}\r\n      />\r\n      <div\r\n        className={lineClass}\r\n        title=\"View Info\"\r\n        onClick={() => props.onLineClick(props.line)}\r\n      >\r\n        <label dangerouslySetInnerHTML={{ __html: props.line.html }}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Line);\r\n","export const DISPLAY = {\r\n  wholeBook: \"wholeBook\",\r\n  currentChapter: \"currentChapter\",\r\n};\r\n\r\nexport const FILTER = {\r\n  none: \"none\",\r\n  viewHeaders: \"viewHeaders\",\r\n  viewTriggerLines: \"viewTriggerLines\",\r\n};\r\n\r\nexport const SPLIT_PATTERN = {\r\n  sentences: \"sentences\",\r\n  lines: \"lines\",\r\n  paragraphs: \"paragraphs\",\r\n};\r\n\r\nexport const HTML_TEXT_DECORATION_TAGS = [\"strong\", \"em\", \"i\", \"b\"];\r\n\r\nexport const TRIGGER_TYPE = {\r\n  bgColor: \"Background Color\",\r\n  bgImage: \"Background Image\",\r\n  sound: \"Sound\",\r\n  animation: \"Animation\",\r\n  fontColor: \"Font Color\",\r\n};\r\n\r\nexport const TO_COLOR_CSS_STRING = (color) => {\r\n  return `rgb(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\r\n};\r\n","import React from \"react\";\r\nimport \"./EditBookSideBar.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { DISPLAY, FILTER, SPLIT_PATTERN } from \"../constants\";\r\n\r\nconst EditBookSideBar = (props) => {\r\n  return (\r\n    <div className=\"wrapper side-bar p-0 pt-4 m-0\">\r\n      <nav id=\"sidebar\" className=\"fixed-pos row p-0 m-0\">\r\n        <ul className=\"list-unstyled col\">\r\n          <div>\r\n            <h3>\r\n              <b>Edit Book</b>\r\n            </h3>\r\n          </div>\r\n          <li>\r\n            <div className=\"side-bar-item col\">\r\n              <label className=\"dropdown-toggle side-bar-item-text\">\r\n                Display\r\n              </label>\r\n            </div>\r\n            <ul className=\"list-unstyled\" id=\"homeSubmenu\">\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setDisplay(DISPLAY.wholeBook)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.display === DISPLAY.wholeBook ? \" selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">Whole Book</label>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setDisplay(DISPLAY.currentChapter)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.display === DISPLAY.currentChapter ? \" selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">\r\n                    Current Chapter\r\n                  </label>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <div className=\"side-bar-item col\">\r\n              <label className=\"dropdown-toggle side-bar-item-text\">\r\n                Split by\r\n              </label>\r\n            </div>\r\n            <ul className=\"list-unstyled\" id=\"homeSubmenu\">\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setSplitPattern(SPLIT_PATTERN.sentences)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.splitPattern === SPLIT_PATTERN.sentences\r\n                      ? \" selected\"\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">Sentences</label>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setSplitPattern(SPLIT_PATTERN.lines)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.splitPattern === SPLIT_PATTERN.lines\r\n                      ? \" selected\"\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">Lines</label>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <div className=\"side-bar-item col\">\r\n              <label className=\"dropdown-toggle side-bar-item-text\">\r\n                Filter\r\n              </label>\r\n            </div>\r\n            <ul className=\"list-unstyled\">\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setFilter(FILTER.none)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.filter === FILTER.none ? \" selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">None</label>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setFilter(FILTER.viewHeaders)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.filter === FILTER.viewHeaders ? \" selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">View Headers</label>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setFilter(FILTER.viewTriggerLines)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.filter === FILTER.viewTriggerLines ? \" selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">\r\n                    View Trigger Lines\r\n                  </label>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <div className=\"side-bar-item col\">\r\n              <label className=\"side-bar-item-text\">Save Checkpoint</label>\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div className=\"side-bar-item col\">\r\n              <label className=\"side-bar-item-text\">Choose Another Book</label>\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div className=\"side-bar-item last col\">\r\n              <label className=\"side-bar-item-text\">Publish / Update</label>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(EditBookSideBar);\r\n","import React, { Fragment } from \"react\";\r\nimport \"./TriggersPopUp.scss\";\r\nimport { TO_COLOR_CSS_STRING, TRIGGER_TYPE } from \"../constants\";\r\n\r\nconst TriggersPopUp = (props) => {\r\n  const renderTriggerProperty = (trigger) => {\r\n    if (\r\n      trigger.type === TRIGGER_TYPE.bgColor ||\r\n      trigger.type === TRIGGER_TYPE.fontColor\r\n    ) {\r\n      return (\r\n        <div>\r\n          <div\r\n            className=\"color-preview\"\r\n            style={{ backgroundColor: TO_COLOR_CSS_STRING(trigger.property) }}\r\n          ></div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"triggers-popup\">\r\n      <div className=\"menu flex-column\">\r\n        <div dangerouslySetInnerHTML={{ __html: '\"' + props.html + '\"' }}></div>\r\n        <div className=\"menu-header mb-3 mt-4\">Assigned Triggers:</div>\r\n        {props.triggers.length > 0 ? (\r\n          <Fragment>\r\n            <div className=\"row mb-2\">\r\n              <div className=\"col-4 font-weight-bold\">{\"Name:\"}</div>\r\n              <div className=\"col-4 font-weight-bold\">{\"Type:\"}</div>\r\n              <div className=\"col-4 font-weight-bold\">{\"Property:\"}</div>\r\n            </div>\r\n            {props.triggers.map((trigger, i) => (\r\n              <div key={i} className=\"row mb-1\">\r\n                <div className=\"col-4\">{trigger.name}</div>\r\n                <div className=\"col-4\">{trigger.type}</div>\r\n                <div className=\"col-4\">{renderTriggerProperty(trigger)}</div>\r\n              </div>\r\n            ))}\r\n          </Fragment>\r\n        ) : (\r\n          <div className=\"row mb-4\">\r\n            <div className=\"col ml-3\">\r\n              There are currently no assigned triggers.\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"row\">\r\n          <button\r\n            onClick={props.closePopUp}\r\n            className=\"btn btn-light col-4 offset-4 mt-4\"\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(TriggersPopUp);\r\n","import React, { useState, Fragment } from \"react\";\r\nimport \"./EditLinePopUp.scss\";\r\nimport { TRIGGER_TYPE, TO_COLOR_CSS_STRING } from \"../constants\";\r\nimport { SketchPicker } from \"react-color\";\r\n\r\nconst STAGES = {\r\n  initial: \"initial\",\r\n  chooseTriggerType: \"chooseTriggerType\",\r\n  chooseColor: \"chooseColor\",\r\n  uploadFile: \"uploadFile\",\r\n};\r\n\r\nconst defaultColorWhite = {\r\n  r: \"255\",\r\n  g: \"255\",\r\n  b: \"255\",\r\n  a: \"1\",\r\n};\r\n\r\nconst EditLinePopUp = (props) => {\r\n  const [stage, setStage] = useState(STAGES.initial);\r\n  const [triggerName, setTriggerName] = useState(\"\");\r\n  const [triggerType, setTriggerType] = useState(TRIGGER_TYPE.bgColor);\r\n  const [file, setFile] = useState(null);\r\n  const [color, setColor] = useState(defaultColorWhite);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  const handleNextToChooseProperty = () => {\r\n    let validName = true;\r\n    props.triggers.forEach((trigger) => {\r\n      if (trigger.name === triggerName) {\r\n        setErrorMessage(\r\n          \"A trigger with this name already exists for this line. Please choose a unique name.\"\r\n        );\r\n        validName = false;\r\n      }\r\n    });\r\n    if (validName) chooseAndSetValueStage();\r\n  };\r\n\r\n  const initializeState = () => {\r\n    setTriggerName(\"\");\r\n    setTriggerType(TRIGGER_TYPE.bgColor);\r\n    setColor(defaultColorWhite);\r\n    setFile(null);\r\n    setStage(STAGES.initial);\r\n  };\r\n\r\n  const isPropertyColor = () => {\r\n    return (\r\n      triggerType === TRIGGER_TYPE.bgColor ||\r\n      triggerType === TRIGGER_TYPE.fontColor\r\n    );\r\n  };\r\n\r\n  const handleFinishAddingTrigger = () => {\r\n    props.onAddTrigger({\r\n      name: triggerName,\r\n      type: triggerType,\r\n      property: isPropertyColor() ? color : file,\r\n    });\r\n    initializeState();\r\n  };\r\n\r\n  const chooseAndSetValueStage = () => {\r\n    setStage(isPropertyColor() ? STAGES.chooseColor : STAGES.uploadFile);\r\n  };\r\n\r\n  const renderTriggerProperty = (trigger) => {\r\n    if (\r\n      trigger.type === TRIGGER_TYPE.bgColor ||\r\n      trigger.type === TRIGGER_TYPE.fontColor\r\n    ) {\r\n      return (\r\n        <div>\r\n          <div\r\n            className=\"color-preview\"\r\n            style={{ backgroundColor: TO_COLOR_CSS_STRING(trigger.property) }}\r\n          ></div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderStageInitial = () => {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"col\">\r\n          <label htmlFor=\"isHeader\">\r\n            <input\r\n              className=\"mr-1 mt-3\"\r\n              type=\"checkbox\"\r\n              id=\"isHeader\"\r\n              checked={props.isLineHeader}\r\n              onChange={props.onToggleHeaderStatus}\r\n            />\r\n            Chapter Header\r\n          </label>\r\n        </div>\r\n        <div className=\"menu-header mb-3 mt-4\">Edit Triggers:</div>\r\n        {props.triggers.length > 0 ? (\r\n          <Fragment>\r\n            <div className=\"row mb-2\">\r\n              <div className=\"col-3 font-weight-bold\">{\"Name:\"}</div>\r\n              <div className=\"col-3 font-weight-bold\">{\"Type:\"}</div>\r\n              <div className=\"col-3 font-weight-bold\">{\"Property:\"}</div>\r\n            </div>\r\n            {props.triggers.map((trigger, i) => (\r\n              <div key={i} className=\"row mb-1\">\r\n                <div className=\"col-3\">{trigger.name}</div>\r\n                <div className=\"col-3\">{trigger.type}</div>\r\n                <div className=\"col-3\">{renderTriggerProperty(trigger)}</div>\r\n                <div className=\"col-3\">\r\n                  <button\r\n                    className=\"btn btn-danger\"\r\n                    onClick={() => props.onRemoveTrigger(trigger)}\r\n                  >\r\n                    Remove Trigger\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </Fragment>\r\n        ) : (\r\n          <div className=\"row\">\r\n            <div className=\"col ml-3\">\r\n              There are currently no assigned triggers.\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"row mt-3\">\r\n          <div className=\"col-6\">\r\n            <button\r\n              className=\"btn btn-success col\"\r\n              onClick={() => setStage(STAGES.chooseTriggerType)}\r\n            >\r\n              Add A New Trigger\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  const renderStageTriggerType = () => {\r\n    return (\r\n      <Fragment>\r\n        <input\r\n          className=\"col form-control mt-4 mb-3\"\r\n          type=\"text\"\r\n          placeholder=\"Trigger Name\"\r\n          value={triggerName}\r\n          onChange={(e) => setTriggerName(e.target.value)}\r\n        />\r\n        <label htmlFor=\"triggerType col\">Choose Trigger Type:</label>\r\n        <select\r\n          id=\"triggerType col\"\r\n          value={triggerType}\r\n          onChange={(e) => setTriggerType(e.target.value)}\r\n        >\r\n          <option value={TRIGGER_TYPE.bgColor}>{TRIGGER_TYPE.bgColor}</option>\r\n          <option value={TRIGGER_TYPE.fontColor}>\r\n            {TRIGGER_TYPE.fontColor}\r\n          </option>\r\n          <option value={TRIGGER_TYPE.bgImage}>{TRIGGER_TYPE.bgImage}</option>\r\n          <option value={TRIGGER_TYPE.sound}>Sound or Music</option>\r\n          <option value={TRIGGER_TYPE.animation}>\r\n            {TRIGGER_TYPE.animation}\r\n          </option>\r\n        </select>\r\n        <div className=\"row mt-3\">\r\n          <div className=\"col-6\">\r\n            <button\r\n              className=\"btn btn-success col\"\r\n              onClick={() => setStage(STAGES.initial)}\r\n            >\r\n              Back\r\n            </button>\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <button\r\n              className=\"btn btn-success col\"\r\n              onClick={handleNextToChooseProperty}\r\n              disabled={!triggerName}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {errorMessage ? (\r\n          <label className=\"error badge badge-danger mt-2\">\r\n            {errorMessage}\r\n          </label>\r\n        ) : null}\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  const renderStageChooseColor = () => {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"nav-item col\">\r\n          <label className=\"mb-2 mt-3\">Choose A Color:</label>\r\n          <SketchPicker\r\n            color={color}\r\n            onChange={(color) => setColor(color.rgb)}\r\n          />\r\n        </div>\r\n        <div className=\"row mt-3\">\r\n          <div className=\"col-6\">\r\n            <button\r\n              className=\"btn btn-success col\"\r\n              onClick={() => setStage(STAGES.chooseTriggerType)}\r\n            >\r\n              Back\r\n            </button>\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <button\r\n              className=\"btn btn-success col\"\r\n              onClick={handleFinishAddingTrigger}\r\n              disabled={!color}\r\n            >\r\n              Finish\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  const renderStage = () => {\r\n    switch (stage) {\r\n      case STAGES.initial:\r\n        return renderStageInitial();\r\n      case STAGES.chooseTriggerType:\r\n        return renderStageTriggerType();\r\n      case STAGES.chooseColor:\r\n        return renderStageChooseColor();\r\n      case STAGES.uploadFile:\r\n      default:\r\n        console.error(\"Not implemented stage!\", stage);\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"edit-line-popup\">\r\n      <div className=\"menu flex-column\">\r\n        <div dangerouslySetInnerHTML={{ __html: '\"' + props.html + '\"' }}></div>\r\n        {renderStage()}\r\n        <div className=\"row mt-5\">\r\n          <button\r\n            onClick={props.closePopUp}\r\n            className=\"btn btn-danger col-4 offset-4\"\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(EditLinePopUp);\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport Line from \"./Line\";\r\nimport EditBookSideBar from \"./EditBookSideBar\";\r\nimport {\r\n  DISPLAY,\r\n  FILTER,\r\n  SPLIT_PATTERN,\r\n  HTML_TEXT_DECORATION_TAGS,\r\n} from \"../constants\";\r\nimport \"./EditBookScreen.scss\";\r\nimport TriggersPopUp from \"./TriggersPopUp\";\r\nimport EditLinePopUp from \"./EditLinePopUp\";\r\nimport CloneDeep from \"lodash/cloneDeep\";\r\n\r\nconst EditBookScreen = (props) => {\r\n  const bookContent = props.bookContent;\r\n\r\n  const [logicalLines, setLogicalLines] = useState(null);\r\n  const [display, setDisplay] = useState(DISPLAY.wholeBook);\r\n  const [filter, setFilter] = useState(FILTER.none);\r\n  const [splitPattern, setSplitPattern] = useState(SPLIT_PATTERN.sentences);\r\n  const [isLoading, setIsLoading] = useState(bookContent ? true : false);\r\n  const [menuLineId, setMenuLineId] = useState(null);\r\n  const [menuSentenceId, setMenuSentenceId] = useState(null);\r\n  const [menuLineHtml, setMenuLineHtml] = useState(null);\r\n  const [menuTriggers, setMenuTriggers] = useState([]);\r\n  const [isLineHeader, setIsLineHeader] = useState(false);\r\n  const [showTriggersPopUp, setShowTriggersPopUp] = useState(false);\r\n  const [showEditLinePopUp, setShowEditLinePopUp] = useState(false);\r\n\r\n  const isSentenceHeader = (sentencePartsList) => {\r\n    if (!sentencePartsList[0]) {\r\n      return false;\r\n    }\r\n    const firstPart = sentencePartsList[0].text;\r\n    return /chapter/i.test(firstPart) || /episode/i.test(firstPart);\r\n  };\r\n\r\n  const getHtmlTagsRegex = () => {\r\n    const matchStr = `<(${HTML_TEXT_DECORATION_TAGS.map(\r\n      (tag) => `|(${tag})`\r\n    )})>`\r\n      .split(\",\")\r\n      .join(\"\")\r\n      .replace(\"|\", \"\");\r\n    return new RegExp(matchStr);\r\n  };\r\n\r\n  const getPartsAccordingToHtmlTags = (lineList) => {\r\n    let currentlyOpenTags = [];\r\n    let returnList = [];\r\n    for (let i = 0; i < lineList.length; i++) {\r\n      let sentence = lineList[i].split(/<\\/?/).join(\"%%<\");\r\n      sentence = sentence.split(\">\").join(\">%%\");\r\n      const sentenceSplitList = sentence.split(\"%%\");\r\n      const returnSentenceList = [];\r\n      for (let j = 0; j < sentenceSplitList.length; j++) {\r\n        const match = sentenceSplitList[j].match(getHtmlTagsRegex());\r\n        if (match) {\r\n          if (match[1]) {\r\n            const tagName = match[1];\r\n            const index = currentlyOpenTags.indexOf(tagName);\r\n            if (index > -1) {\r\n              currentlyOpenTags.splice(index, 1);\r\n            } else {\r\n              currentlyOpenTags.push(tagName);\r\n            }\r\n          }\r\n        } else if (sentenceSplitList[j] !== \"\") {\r\n          returnSentenceList.push({\r\n            text: sentenceSplitList[j],\r\n            tags: [...currentlyOpenTags],\r\n          });\r\n        }\r\n      }\r\n      returnList[i] = {\r\n        parts: [...returnSentenceList],\r\n        header: isSentenceHeader(returnSentenceList),\r\n        sentenceId: i,\r\n        triggers: [],\r\n      };\r\n    }\r\n    return returnList;\r\n  };\r\n\r\n  const prepareAndSetLogicalLines = () => {\r\n    let lineLists = bookContent.split(\"</p><p>\");\r\n    lineLists = lineLists.map((lineList) =>\r\n      lineList\r\n        .split(\". \")\r\n        .join(\".<p>\")\r\n        .split(/<\\/?p>/)\r\n        .filter((lineHtml) => lineHtml !== \"\")\r\n    );\r\n    const lineListsSplitToParts = lineLists.map((lineList, i) => {\r\n      return { content: getPartsAccordingToHtmlTags(lineList), lineId: i };\r\n    });\r\n    setLogicalLines(lineListsSplitToParts);\r\n    props.setBookData(lineListsSplitToParts);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (bookContent) {\r\n      setIsLoading(true);\r\n      prepareAndSetLogicalLines();\r\n      setIsLoading(false);\r\n    }\r\n  }, [bookContent]);\r\n\r\n  const setSelectedLineProperties = (line) => {\r\n    setMenuLineId(line.lineId);\r\n    setMenuSentenceId(line.sentenceId);\r\n    setMenuLineHtml(line.html);\r\n    setIsLineHeader(line.header);\r\n    setMenuTriggers(line.triggers);\r\n  };\r\n\r\n  const handleLineClick = (line) => {\r\n    setSelectedLineProperties(line);\r\n    toggleShowTriggersPopUp();\r\n  };\r\n\r\n  const handleLineEditClick = (line) => {\r\n    setSelectedLineProperties(line);\r\n    toggleShowEditLinePopUp();\r\n  };\r\n\r\n  const createLine = (line, i) => {\r\n    return (\r\n      <Line\r\n        line={line}\r\n        key={i}\r\n        onLineClick={handleLineClick}\r\n        onEditLineClick={handleLineEditClick}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderDisplayedContent = () => {\r\n    if (splitPattern === SPLIT_PATTERN.sentences) {\r\n      return renderSentences();\r\n    } else if (splitPattern === SPLIT_PATTERN.lines) {\r\n      return renderLines();\r\n    } else {\r\n      return (\r\n        <div>\r\n          The \"split by\" value is not supported for this type of book file.\r\n          Please change it to either lines or sentences.\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const getSentenceHtml = (sentence) => {\r\n    let htmlSentence = \"\";\r\n    sentence.parts.forEach((part) => {\r\n      part.tags.forEach((tag) => {\r\n        htmlSentence += `<${tag}>`;\r\n      });\r\n      htmlSentence += part.text + \" \";\r\n      part.tags\r\n        .slice(0)\r\n        .reverse()\r\n        .forEach((tag) => {\r\n          htmlSentence += `</${tag}>`;\r\n        });\r\n    });\r\n    return htmlSentence;\r\n  };\r\n\r\n  const renderSentences = () => {\r\n    return logicalLines.map((line, l) => {\r\n      return (\r\n        <div key={line.lineId} className=\"line-wrapper\">\r\n          {line.content.map((sentence) => {\r\n            let htmlSentence = getSentenceHtml(sentence);\r\n            return createLine(\r\n              {\r\n                html: htmlSentence,\r\n                header: sentence.header,\r\n                lineId: line.lineId,\r\n                sentenceId: sentence.sentenceId,\r\n                triggers: sentence.triggers,\r\n              },\r\n              sentence.sentenceId\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const getLineHtml = (line) => {\r\n    let htmlLine = \"\";\r\n    line.content.forEach((sentence) => {\r\n      sentence.parts.forEach((part) => {\r\n        part.tags.forEach((tag) => {\r\n          htmlLine += `<${tag}>`;\r\n        });\r\n        htmlLine += part.text + \" \";\r\n        part.tags\r\n          .slice(0)\r\n          .reverse()\r\n          .forEach((tag) => {\r\n            htmlLine += `</${tag}>`;\r\n          });\r\n      });\r\n    });\r\n    return htmlLine;\r\n  };\r\n\r\n  const getLineTriggers = (line) => {\r\n    let triggers = [];\r\n    for (let i = 0; i < line.content.length; i++) {\r\n      const currSentence = line.content[i];\r\n      triggers = triggers.concat(currSentence.triggers);\r\n    }\r\n    return triggers;\r\n  };\r\n\r\n  const getIsLineHeader = (line) => {\r\n    for (let i = 0; i < line.content.length; i++) {\r\n      const currSentence = line.content[i];\r\n      if (currSentence.header) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const renderLines = () => {\r\n    return logicalLines.map((line) => {\r\n      let htmlLine = getLineHtml(line);\r\n      return createLine(\r\n        {\r\n          html: htmlLine,\r\n          header: getIsLineHeader(line),\r\n          lineId: line.lineId,\r\n          sentenceId: null,\r\n          triggers: getLineTriggers(line),\r\n        },\r\n        line.lineId\r\n      );\r\n    });\r\n  };\r\n\r\n  const toggleHeaderStatus = () => {\r\n    const currentHeaderStatus = isLineHeader;\r\n    setIsLineHeader(!currentHeaderStatus);\r\n    const line = logicalLines[menuLineId];\r\n    if (menuSentenceId !== null) {\r\n      line.content[menuSentenceId].header = !currentHeaderStatus;\r\n    } else {\r\n      if (currentHeaderStatus) {\r\n        // If canceling header - cancel in all sentences of the line\r\n        for (let i = 0; i < line.content.length; i++) {\r\n          line.content[i].header = false;\r\n        }\r\n      } else {\r\n        // If marking header - mark only the first sentence of the line\r\n        line.content[0].header = true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const toggleShowTriggersPopUp = () => {\r\n    setShowEditLinePopUp(false);\r\n    setShowTriggersPopUp(!showTriggersPopUp);\r\n  };\r\n\r\n  const toggleShowEditLinePopUp = () => {\r\n    setShowTriggersPopUp(false);\r\n    setShowEditLinePopUp(!showEditLinePopUp);\r\n  };\r\n\r\n  const changeTriggersListInState = (changeTriggerListFunc, isRemove) => {\r\n    let logicalLinesDeepCopy = CloneDeep(logicalLines);\r\n    const lineCopy = logicalLinesDeepCopy[menuLineId];\r\n    const triggersListCopy =\r\n      lineCopy.content[menuSentenceId !== null ? menuSentenceId : 0].triggers;\r\n    if (isRemove && menuSentenceId === null) {\r\n      lineCopy.content.forEach((currSentence) =>\r\n        changeTriggerListFunc(currSentence.triggers)\r\n      );\r\n    } else {\r\n      changeTriggerListFunc(triggersListCopy);\r\n    }\r\n\r\n    setLogicalLines(logicalLinesDeepCopy);\r\n    if (menuSentenceId !== null) setMenuTriggers(triggersListCopy);\r\n    else {\r\n      let triggers = [];\r\n      for (let i = 0; i < lineCopy.content.length; i++) {\r\n        const currSentence = lineCopy.content[i];\r\n        triggers = triggers.concat(currSentence.triggers);\r\n      }\r\n      setMenuTriggers(triggers);\r\n    }\r\n  };\r\n\r\n  const handleAddTrigger = (trigger) => {\r\n    changeTriggersListInState((triggersListCopy) => {\r\n      triggersListCopy.push(trigger);\r\n    });\r\n  };\r\n\r\n  const handleRemoveTrigger = (trigger) => {\r\n    changeTriggersListInState((triggersListCopy) => {\r\n      let index = -1;\r\n      triggersListCopy.forEach((currTrigger, i) => {\r\n        if (trigger.name === currTrigger.name) index = i;\r\n      });\r\n      if (index >= 0) {\r\n        triggersListCopy.splice(index, 1);\r\n      }\r\n    }, true);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"side-bar-bg floating-col\">\r\n            <EditBookSideBar\r\n              display={display}\r\n              filter={filter}\r\n              setDisplay={setDisplay}\r\n              setFilter={setFilter}\r\n              splitPattern={splitPattern}\r\n              setSplitPattern={setSplitPattern}\r\n            />\r\n          </div>\r\n          <div className=\"side-bar-mock-filler floating-col\"></div>\r\n          <div className=\"main-edit-area floating-col\">\r\n            {logicalLines ? (\r\n              renderDisplayedContent()\r\n            ) : isLoading ? (\r\n              <div>Loading book content...</div>\r\n            ) : (\r\n              <div>\r\n                No book content to edit. Please use the upload page to upload a\r\n                book file.\r\n              </div>\r\n            )}\r\n            {showTriggersPopUp ? (\r\n              <TriggersPopUp\r\n                html={menuLineHtml}\r\n                triggers={menuTriggers}\r\n                closePopUp={toggleShowTriggersPopUp}\r\n              />\r\n            ) : null}\r\n            {showEditLinePopUp ? (\r\n              <EditLinePopUp\r\n                html={menuLineHtml}\r\n                triggers={menuTriggers}\r\n                isLineHeader={isLineHeader}\r\n                onToggleHeaderStatus={toggleHeaderStatus}\r\n                closePopUp={toggleShowEditLinePopUp}\r\n                onAddTrigger={handleAddTrigger}\r\n                onRemoveTrigger={handleRemoveTrigger}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(EditBookScreen);\r\n","import React, { useState } from \"react\";\r\nimport \"./ReadBook.scss\";\r\n\r\nconst ReadBook = (props) => {\r\n  const renderSentences = () => {\r\n    return props.bookData.map((line, l) => {\r\n      return (\r\n        <p key={l}>\r\n          {line.content.map((sentence, i) => {\r\n            let htmlSentence = \"\";\r\n            sentence.parts.forEach((part) => {\r\n              part.tags.forEach((tag) => {\r\n                htmlSentence += `<${tag}>`;\r\n              });\r\n              htmlSentence += part.text + \" \";\r\n              part.tags\r\n                .slice(0)\r\n                .reverse()\r\n                .forEach((tag) => {\r\n                  htmlSentence += `</${tag}>`;\r\n                });\r\n            });\r\n            const textClassName =\r\n              (sentence.header ? \"header\" : \"line\") + \"-read mr-1\";\r\n            return (\r\n              <label\r\n                dangerouslySetInnerHTML={{ __html: htmlSentence }}\r\n                key={i}\r\n                className={textClassName}\r\n              ></label>\r\n            );\r\n          })}\r\n        </p>\r\n      );\r\n    });\r\n  };\r\n\r\n  const renderLinesFromData = () => {\r\n    return renderSentences();\r\n  };\r\n\r\n  const getCurrentStyle = () => {\r\n    return { backgroundColor: \"white\" };\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\" style={getCurrentStyle()}>\r\n      {props.bookData ? renderLinesFromData() : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ReadBook);\r\n","import React, { useEffect, Fragment, useState } from \"react\";\r\nimport { useLocation, Route, Redirect } from \"react-router-dom\";\r\nimport BookUploadForm from \"./BookUploadForm\";\r\nimport EditBookScreen from \"./EditBookScreen\";\r\nimport ReadBook from \"./ReadBook\";\r\n\r\nconst Routes = (props) => {\r\n  const location = useLocation();\r\n  const {\r\n    setPathName,\r\n    setBookContent,\r\n    bookContent,\r\n    bookData,\r\n    setBookData,\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    setPathName(location.pathname);\r\n  }, [location, setPathName]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Route exact path=\"/edit\">\r\n        <EditBookScreen bookContent={bookContent} setBookData={setBookData} />\r\n      </Route>\r\n      <Route exact path=\"/upload\">\r\n        <BookUploadForm setBookContent={setBookContent} />\r\n      </Route>\r\n      <Route exact path=\"/preview\">\r\n        <ReadBook bookData={bookData} />\r\n      </Route>\r\n      <Redirect exact from=\"/\" to={bookContent ? \"/edit\" : \"/upload\"} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(Routes);\r\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport NavigationBar from \"./NavigationBar\";\nimport Routes from \"./Routes\";\n\nconst App = () => {\n  const [bookContent, setBookContent] = useState(null);\n  const [pathName, setPathName] = useState(null);\n  const [bookData, setBookData] = useState(null);\n\n  const getBookContentFromServer = () => {\n    console.warn(\"Not implemented getBookContentFromServer. Returning null.\");\n    return null;\n  };\n\n  useEffect(() => {\n    const bookContent = getBookContentFromServer();\n    setBookContent(bookContent);\n  }, []);\n\n  return (\n    <Fragment>\n      <HashRouter>\n        <NavigationBar pathName={pathName} />\n        <div className=\"header-space\"></div>\n        <Route path=\"/\">\n          <Routes\n            setPathName={setPathName}\n            bookContent={bookContent}\n            setBookContent={setBookContent}\n            bookData={bookData}\n            setBookData={setBookData}\n          />\n        </Route>\n      </HashRouter>\n    </Fragment>\n  );\n};\n\nexport default React.memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"container-fluid BookEditorContainer\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}