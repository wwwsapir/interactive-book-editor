{"version":3,"sources":["components/NavigationBar.jsx","components/BookUploadForm.jsx","components/Line.jsx","constants.js","components/EditBookSideBar.jsx","components/EditBookScreen.jsx","components/Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["React","memo","props","useState","pathName","setPathName","useEffect","currentPath","renderInactiveNavLink","text","to","className","href","src","process","map","i","key","renderActiveNavLink","errMessage","setErrMessage","isLoading","setIsLoading","docFile","setDocFile","handleSubmit","a","arrayBuffer","mammoth","convertToHtml","result","html","value","setBookContent","type","id","onChange","e","fileName","target","files","name","test","hidden","onClick","disabled","lineClass","line","header","addClass","alt","dangerouslySetInnerHTML","__html","DISPLAY","FILTER","SPLIT_PATTERN","HTML_TEXT_DECORATION_TAGS","setDisplay","display","setSplitPattern","splitPattern","setFilter","filter","bookContent","logicalLines","setLogicalLines","isSentenceHeader","sentencePartsList","firstPart","getHtmlTagsRegex","matchStr","tag","split","join","replace","RegExp","prepareAndSetLogicalLines","sentences","lineHtml","paragraph","paragraphList","currentlyOpenTags","returnList","length","newParagraphList","paragraphListSplit","returnSentenceList","j","match","tagName","index","indexOf","splice","push","tags","parts","triggers","getPartsAccordingToHtmlTags","createLine","renderSentences","l","sentence","htmlSentence","forEach","part","slice","reverse","renderLines","htmlLine","location","useLocation","pathname","exact","path","from","console","warn","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da9c2b9b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./NavigationBar.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavigationBar = (props) => {\r\n  const [pathName, setPathName] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const currentPath = props.pathName;\r\n    setPathName(currentPath);\r\n  }, [props.pathName]);\r\n\r\n  const handleCollapseNavBar = () => {\r\n    console.error(\"handleCollapseNavBar not implemented\");\r\n  };\r\n\r\n  const renderActiveNavLink = (text) => {\r\n    return <div className=\"link-active\">{text}</div>;\r\n  };\r\n\r\n  const renderInactiveNavLink = (text, to) => {\r\n    return (\r\n      <Link to={to}>\r\n        <div className=\"link\">{text}</div>\r\n      </Link>\r\n    );\r\n  };\r\n\r\n  const navLinks = [\r\n    { text: \"About\", to: \"/about\" },\r\n    { text: \"Upload a New Book File\", to: \"/upload\" },\r\n    { text: \"Edit Book Triggers\", to: \"/edit\" },\r\n    { text: \"Contact Us\", to: \"/contact\" },\r\n  ];\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"navbar-header\">\r\n          {/* <button\r\n            type=\"button\"\r\n            className=\"navbar-toggle\"\r\n            onClick={handleCollapseNavBar}\r\n          >\r\n            <span className=\"icon-bar\"></span>\r\n            <span className=\"icon-bar\"></span>\r\n            <span className=\"icon-bar\"></span>\r\n          </button> */}\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            <img\r\n              src={`${process.env.PUBLIC_URL}/images/temp_logo.png`}\r\n              className=\"logo-img\"\r\n            />\r\n          </a>\r\n        </div>\r\n        {navLinks.map(({ text, to }, i) => (\r\n          <li key={i}>\r\n            {to === pathName\r\n              ? renderActiveNavLink(text)\r\n              : renderInactiveNavLink(text, to)}\r\n          </li>\r\n        ))}\r\n        <ul className=\"nav navbar-nav\"></ul>\r\n        <ul className=\"nav navbar-nav navbar-right\">\r\n          <li>{renderInactiveNavLink(\"Login\", \"/login\")}</li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default React.memo(NavigationBar);\r\n","import React, { useState, Fragment } from \"react\";\r\nimport \"./BookUploadForm.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport mammoth from \"mammoth\";\r\n// import axios from \"axios\";\r\n\r\nconst BookUploadForm = (props) => {\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [docFile, setDocFile] = useState(null);\r\n\r\n  const handleSubmit = async () => {\r\n    setIsLoading(true);\r\n    // Save file in server (if I'll need it in the future):\r\n    // const fd = new FormData();\r\n    // fd.append(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", this.docFile, this.docFile.name);\r\n    // const res = await axios.post(url, fd, {\r\n    //   onUploadProgress: (progressEvent) => {\r\n    //     console.log(\r\n    //       \"Upload progress:\",\r\n    //       Math.round((progressEvent.loaded / progressEvent.total) * 100) + \"%\"\r\n    //     );\r\n    //   },\r\n    // });\r\n    // console.log(res);\r\n\r\n    // Convert and get the docx as html\r\n    const arrayBuffer = await docFile.arrayBuffer();\r\n    // const result = await mammoth.extractRawText({ arrayBuffer });\r\n    // const text = result.value;\r\n    // console.log(text);\r\n    const result = await mammoth.convertToHtml({ arrayBuffer });\r\n    const html = result.value;\r\n    props.setBookContent(html);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const fileName = e.target.files[0].name;\r\n    const docPattern = /.*.docx/;\r\n    if (docPattern.test(fileName)) {\r\n      setDocFile(e.target.files[0]);\r\n      setErrMessage(\"\");\r\n    } else {\r\n      setDocFile(null);\r\n      setErrMessage(\"Please only select a file ending with .docx\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"menu-bg\">\r\n        <div className=\"menu-window\">\r\n          <div className=\"menu\">\r\n            <h4 className=\"menu-header\">Welcome to Interactive Book Editer!</h4>\r\n            <label className=\"mr-1\">Choose a docx file: </label>\r\n            <div className=\"custom-file mb-2\">\r\n              <input\r\n                type=\"file\"\r\n                className=\"custom-file-input\"\r\n                id=\"inputGroupFile01\"\r\n                onChange={handleChange}\r\n              />\r\n              <label className=\"custom-file-label\">\r\n                {docFile ? docFile.name : \"Choose file\"}\r\n              </label>\r\n              <li>\r\n                <h6>\r\n                  <span\r\n                    className=\"badge badge-danger mt-2\"\r\n                    hidden={!errMessage}\r\n                  >\r\n                    {errMessage}\r\n                  </span>\r\n                </h6>\r\n              </li>\r\n            </div>\r\n            <button\r\n              onClick={handleSubmit}\r\n              className=\"btn btn-success form-control mt-3\"\r\n              disabled={isLoading || !docFile}\r\n            >\r\n              {isLoading ? \"Please wait...\" : \"Load Book\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(BookUploadForm);\r\n","import React from \"react\";\r\nimport \"./Line.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst Line = (props) => {\r\n  const lineClass = `line line-text ${props.line.header ? \"header\" : \"\"}`;\r\n  const addClass = `line add-img ${props.line.header ? \"header\" : \"\"}`;\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <img\r\n        className={addClass}\r\n        src={`${process.env.PUBLIC_URL}/images/add.png`}\r\n        alt=\"Add Trigger\"\r\n      />\r\n      <div className={lineClass}>\r\n        <label dangerouslySetInnerHTML={{ __html: props.line.html }}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Line);\r\n","export const DISPLAY = {\r\n  wholeBook: 0,\r\n  currentChapter: 1,\r\n};\r\n\r\nexport const FILTER = {\r\n  none: 0,\r\n  viewHeaders: 1,\r\n  viewTriggerLines: 2,\r\n};\r\n\r\nexport const SPLIT_PATTERN = {\r\n  sentences: 0,\r\n  lines: 1,\r\n  paragraphs: 2,\r\n};\r\n\r\nexport const HTML_TEXT_DECORATION_TAGS = [\"strong\", \"em\", \"i\", \"b\"];\r\n","import React from \"react\";\r\nimport \"./EditBookSideBar.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { DISPLAY, FILTER, SPLIT_PATTERN } from \"../constants\";\r\n\r\nconst EditBookSideBar = (props) => {\r\n  return (\r\n    <div className=\"wrapper side-bar p-0 pt-4 m-0\">\r\n      <nav id=\"sidebar\" className=\"fixed-pos row p-0 m-0\">\r\n        <ul className=\"list-unstyled col\">\r\n          <div>\r\n            <h3>\r\n              <b>Edit Book</b>\r\n            </h3>\r\n          </div>\r\n          <li>\r\n            <div className=\"side-bar-item col\">\r\n              <label className=\"side-bar-item-text\">Mark Chapter Headers</label>\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div className=\"side-bar-item col\">\r\n              <label className=\"dropdown-toggle side-bar-item-text\">\r\n                Display\r\n              </label>\r\n            </div>\r\n            <ul className=\"list-unstyled\" id=\"homeSubmenu\">\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setDisplay(DISPLAY.wholeBook)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.display === DISPLAY.wholeBook ? \" selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">Whole Book</label>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setDisplay(DISPLAY.currentChapter)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.display === DISPLAY.currentChapter ? \" selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">\r\n                    Current Chapter\r\n                  </label>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <div className=\"side-bar-item col\">\r\n              <label className=\"dropdown-toggle side-bar-item-text\">\r\n                Split by\r\n              </label>\r\n            </div>\r\n            <ul className=\"list-unstyled\" id=\"homeSubmenu\">\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setSplitPattern(SPLIT_PATTERN.sentences)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.splitPattern === SPLIT_PATTERN.sentences\r\n                      ? \" selected\"\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">Sentences</label>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setSplitPattern(SPLIT_PATTERN.lines)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.splitPattern === SPLIT_PATTERN.lines\r\n                      ? \" selected\"\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">Lines</label>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <div className=\"side-bar-item col\">\r\n              <label className=\"dropdown-toggle side-bar-item-text\">\r\n                Filter\r\n              </label>\r\n            </div>\r\n            <ul className=\"list-unstyled\">\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setFilter(FILTER.none)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.filter === FILTER.none ? \" selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">None</label>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setFilter(FILTER.viewHeaders)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.filter === FILTER.viewHeaders ? \" selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">View Headers</label>\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div\r\n                  onClick={() => props.setFilter(FILTER.viewTriggerLines)}\r\n                  className={`side-bar-item-sub col${\r\n                    props.filter === FILTER.viewTriggerLines ? \" selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <label className=\"side-bar-item-sub-text\">\r\n                    View Trigger Lines\r\n                  </label>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <div className=\"side-bar-item col\">\r\n              <label className=\"side-bar-item-text\">Save Checkpoint</label>\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div className=\"side-bar-item last col\">\r\n              <label className=\"side-bar-item-text\">Choose Another Book</label>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(EditBookSideBar);\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport Line from \"./Line\";\r\nimport EditBookSideBar from \"./EditBookSideBar\";\r\nimport {\r\n  DISPLAY,\r\n  FILTER,\r\n  SPLIT_PATTERN,\r\n  HTML_TEXT_DECORATION_TAGS,\r\n} from \"../constants\";\r\nimport \"./EditBookScreen.scss\";\r\n\r\nconst EditBookScreen = (props) => {\r\n  const bookContent = props.bookContent;\r\n\r\n  const [logicalLines, setLogicalLines] = useState(null);\r\n  const [display, setDisplay] = useState(DISPLAY.wholeBook);\r\n  const [filter, setFilter] = useState(FILTER.none);\r\n  const [splitPattern, setSplitPattern] = useState(SPLIT_PATTERN.sentences);\r\n  const [isLoading, setIsLoading] = useState(bookContent ? true : false);\r\n\r\n  const isSentenceHeader = (sentencePartsList) => {\r\n    if (!sentencePartsList[0]) {\r\n      return false;\r\n    }\r\n    const firstPart = sentencePartsList[0].text;\r\n    return /chapter/i.test(firstPart) || /episode/i.test(firstPart);\r\n  };\r\n\r\n  const getHtmlTagsRegex = () => {\r\n    const matchStr = `<(${HTML_TEXT_DECORATION_TAGS.map(\r\n      (tag) => `|(${tag})`\r\n    )})>`\r\n      .split(\",\")\r\n      .join(\"\")\r\n      .replace(\"|\", \"\");\r\n    return new RegExp(matchStr);\r\n  };\r\n\r\n  const getPartsAccordingToHtmlTags = (paragraphList) => {\r\n    let currentlyOpenTags = [];\r\n    let returnList = [];\r\n    for (let i = 0; i < paragraphList.length; i++) {\r\n      let newParagraphList = paragraphList[i].split(/<\\/?/).join(\"%%<\");\r\n      newParagraphList = newParagraphList.split(\">\").join(\">%%\");\r\n      const paragraphListSplit = newParagraphList.split(\"%%\");\r\n      const returnSentenceList = [];\r\n      for (let j = 0; j < paragraphListSplit.length; j++) {\r\n        const match = paragraphListSplit[j].match(getHtmlTagsRegex());\r\n        if (match) {\r\n          if (match[1]) {\r\n            const tagName = match[1];\r\n            const index = currentlyOpenTags.indexOf(tagName);\r\n            if (index > -1) {\r\n              currentlyOpenTags.splice(index, 1);\r\n            } else {\r\n              currentlyOpenTags.push(tagName);\r\n            }\r\n          }\r\n        } else if (paragraphListSplit[j] !== \"\") {\r\n          returnSentenceList.push({\r\n            text: paragraphListSplit[j],\r\n            tags: [...currentlyOpenTags],\r\n          });\r\n        }\r\n      }\r\n      returnList[i] = {\r\n        parts: [...returnSentenceList],\r\n        header: isSentenceHeader(returnSentenceList),\r\n        triggers: [],\r\n      };\r\n    }\r\n    return returnList;\r\n  };\r\n\r\n  const prepareAndSetLogicalLines = () => {\r\n    const lines = bookContent.split(\"</p><p>\");\r\n    let sentences = lines.map((line) =>\r\n      line\r\n        .split(\". \")\r\n        .join(\".<p>\")\r\n        .split(/<\\/?p>/)\r\n        .filter((lineHtml) => lineHtml !== \"\")\r\n    );\r\n    sentences = sentences.map((paragraph) =>\r\n      getPartsAccordingToHtmlTags(paragraph)\r\n    );\r\n    setLogicalLines(sentences);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (bookContent) {\r\n      setIsLoading(true);\r\n      prepareAndSetLogicalLines();\r\n      setIsLoading(false);\r\n    }\r\n  }, [bookContent]);\r\n\r\n  const createLine = (line, i) => {\r\n    return <Line line={line} key={i} index={i} />;\r\n  };\r\n\r\n  const renderDisplayedContent = () => {\r\n    if (splitPattern === SPLIT_PATTERN.sentences) {\r\n      return renderSentences();\r\n    } else if (splitPattern === SPLIT_PATTERN.lines) {\r\n      return renderLines();\r\n    } else {\r\n      return (\r\n        <div>\r\n          The \"split by\" value is not supported for this type of book file.\r\n          Please change it to either lines or sentences.\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderSentences = () => {\r\n    return logicalLines.map((line, l) => {\r\n      return (\r\n        <div key={l} className=\"line-wrapper\">\r\n          {line.map((sentence, i) => {\r\n            let htmlSentence = \"\";\r\n            sentence.parts.forEach((part) => {\r\n              part.tags.forEach((tag) => {\r\n                htmlSentence += `<${tag}>`;\r\n              });\r\n              htmlSentence += part.text + \" \";\r\n              part.tags\r\n                .slice(0)\r\n                .reverse()\r\n                .forEach((tag) => {\r\n                  htmlSentence += `</${tag}>`;\r\n                });\r\n            });\r\n            return createLine(\r\n              { html: htmlSentence, header: sentence.header },\r\n              i\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const renderLines = () => {\r\n    return logicalLines.map((line, i) => {\r\n      let htmlLine = \"\";\r\n      line.forEach((sentence) => {\r\n        sentence.parts.forEach((part) => {\r\n          part.tags.forEach((tag) => {\r\n            htmlLine += `<${tag}>`;\r\n          });\r\n          htmlLine += part.text + \" \";\r\n          part.tags\r\n            .slice(0)\r\n            .reverse()\r\n            .forEach((tag) => {\r\n              htmlLine += `</${tag}>`;\r\n            });\r\n        });\r\n      });\r\n      return createLine({ html: htmlLine, header: line[0].header }, i);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"side-bar-bg floating-col\">\r\n            <EditBookSideBar\r\n              display={display}\r\n              filter={filter}\r\n              setDisplay={setDisplay}\r\n              setFilter={setFilter}\r\n              splitPattern={splitPattern}\r\n              setSplitPattern={setSplitPattern}\r\n            />\r\n          </div>\r\n          <div className=\"side-bar-mock-filler floating-col\"></div>\r\n          <div className=\"main-edit-area floating-col\">\r\n            {logicalLines ? (\r\n              renderDisplayedContent()\r\n            ) : isLoading ? (\r\n              <div>Loading book content...</div>\r\n            ) : (\r\n              <div>\r\n                No book content to edit. Please use the upload page to upload a\r\n                book file.\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(EditBookScreen);\r\n","import React, { useEffect, Fragment } from \"react\";\r\nimport { useLocation, Route, Redirect } from \"react-router-dom\";\r\nimport BookUploadForm from \"./BookUploadForm\";\r\nimport EditBookScreen from \"./EditBookScreen\";\r\n\r\nconst Routes = (props) => {\r\n  const location = useLocation();\r\n  const { setPathName, setBookContent, bookContent } = props;\r\n\r\n  useEffect(() => {\r\n    setPathName(location.pathname);\r\n  }, [location, setPathName]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Route exact path=\"/edit\">\r\n        <EditBookScreen bookContent={bookContent} />\r\n      </Route>\r\n      <Route exact path=\"/upload\">\r\n        <BookUploadForm setBookContent={setBookContent} />\r\n      </Route>\r\n      <Redirect exact from=\"/\" to={bookContent ? \"/edit\" : \"/upload\"} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(Routes);\r\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport NavigationBar from \"./NavigationBar\";\nimport Routes from \"./Routes\";\n\nconst App = () => {\n  const [bookContent, setBookContent] = useState(null);\n  const [pathName, setPathName] = useState(null);\n\n  const getBookContentFromServer = () => {\n    console.warn(\"Not implemented getBookContentFromServer. Returning null.\");\n    return null;\n  };\n\n  useEffect(() => {\n    const bookContent = getBookContentFromServer();\n    setBookContent(bookContent);\n  }, []);\n\n  return (\n    <Fragment>\n      <HashRouter>\n        <NavigationBar pathName={pathName} />\n        <div className=\"header-space\"></div>\n        <Route path=\"/\">\n          <Routes\n            setPathName={setPathName}\n            bookContent={bookContent}\n            setBookContent={setBookContent}\n          />\n        </Route>\n      </HashRouter>\n    </Fragment>\n  );\n};\n\nexport default React.memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"container-fluid BookEditorContainer\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}