{"version":3,"sources":["components/BookUploadForm.jsx","components/EditBookScreen.jsx","components/App.js","serviceWorker.js","index.js"],"names":["React","memo","props","useState","errMessage","setErrMessage","isLoading","setIsLoading","docFile","setDocFile","handleSubmit","a","arrayBuffer","mammoth","convertToHtml","result","html","value","setBookContent","className","type","id","onChange","e","fileName","target","files","name","test","hidden","onClick","disabled","dangerouslySetInnerHTML","__html","bookContent","useEffect","console","warn","exact","path","from","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yZAqFeA,MAAMC,MA/EE,SAACC,GAAW,IAAD,EACIC,mBAAS,IADb,mBACzBC,EADyB,KACbC,EADa,OAEEF,oBAAS,GAFX,mBAEzBG,EAFyB,KAEdC,EAFc,OAGFJ,mBAAS,MAHP,mBAGzBK,EAHyB,KAGhBC,EAHgB,KAK1BC,EAAY,uCAAG,gCAAAC,EAAA,6DACnBJ,GAAa,GADM,SAgBOC,EAAQI,cAhBf,cAgBbA,EAhBa,gBAoBEC,IAAQC,cAAc,CAAEF,gBApB1B,OAoBbG,EApBa,OAqBbC,EAAOD,EAAOE,MACpBf,EAAMgB,eAAeF,GAtBF,2CAAH,qDAqClB,OACE,yBAAKG,UAAU,WACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,eAAd,uCACA,2BAAOA,UAAU,QAAjB,wBACA,yBAAKA,UAAU,oBACb,2BACEC,KAAK,OACLD,UAAU,oBACVE,GAAG,mBACHC,SAvBS,SAACC,GACpB,IAAMC,EAAWD,EAAEE,OAAOC,MAAM,GAAGC,KAChB,UACJC,KAAKJ,IAClBf,EAAWc,EAAEE,OAAOC,MAAM,IAC1BrB,EAAc,MAEdI,EAAW,MACXJ,EAAc,mDAiBR,2BAAOc,UAAU,qBACdX,EAAUA,EAAQmB,KAAO,eAE5B,4BACE,4BACE,0BAAMR,UAAU,0BAA0BU,QAASzB,GAChDA,MAKT,4BACE0B,QAASpB,EACTS,UAAU,oCACVY,SAAUzB,IAAcE,GAEvBF,EAAY,iBAAmB,mBCvE7BN,MAAMC,MAJE,SAACC,GACtB,OAAO,yBAAK8B,wBAAyB,CAAEC,OAAQ/B,EAAMgC,kB,gBC8BxClC,MAAMC,MA1BT,WAAO,IAAD,EACsBE,mBAAS,MAD/B,mBACT+B,EADS,KACIhB,EADJ,KAahB,OALAiB,qBAAU,WACR,IAAMD,GALNE,QAAQC,KAAK,6DACN,MAKPnB,EAAegB,KACd,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,CAAgBL,YAAaA,KAE/B,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,WAChB,kBAAC,EAAD,CAAgBrB,eAAgBA,KAElC,kBAAC,IAAD,CAAUoB,OAAK,EAACE,KAAK,IAAIC,GAAIP,EAAc,QAAU,gBChBvCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAK9B,UAAU,uCACb,kBAAC,EAAD,QAGJ+B,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.7b2ddeb9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./BookUploadForm.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport mammoth from \"mammoth\";\r\n// import axios from \"axios\";\r\n\r\nconst BookUploadForm = (props) => {\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [docFile, setDocFile] = useState(null);\r\n\r\n  const handleSubmit = async () => {\r\n    setIsLoading(true);\r\n    // Save file in server (if I'll need it in the future):\r\n    // const fd = new FormData();\r\n    // fd.append(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", this.docFile, this.docFile.name);\r\n    // const res = await axios.post(url, fd, {\r\n    //   onUploadProgress: (progressEvent) => {\r\n    //     console.log(\r\n    //       \"Upload progress:\",\r\n    //       Math.round((progressEvent.loaded / progressEvent.total) * 100) + \"%\"\r\n    //     );\r\n    //   },\r\n    // });\r\n    // console.log(res);\r\n\r\n    // Convert and get the docx as html\r\n    const arrayBuffer = await docFile.arrayBuffer();\r\n    // const result = await mammoth.extractRawText({ arrayBuffer });\r\n    // const text = result.value;\r\n    // console.log(text);\r\n    const result = await mammoth.convertToHtml({ arrayBuffer });\r\n    const html = result.value;\r\n    props.setBookContent(html);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const fileName = e.target.files[0].name;\r\n    const docPattern = /.*.docx/;\r\n    if (docPattern.test(fileName)) {\r\n      setDocFile(e.target.files[0]);\r\n      setErrMessage(\"\");\r\n    } else {\r\n      setDocFile(null);\r\n      setErrMessage(\"Please only select a file ending with .docx\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"menu-bg\">\r\n      <div className=\"menu-window\">\r\n        <div className=\"menu\">\r\n          <h4 className=\"menu-header\">Welcome to Interactive Book Editer!</h4>\r\n          <label className=\"mr-1\">Choose a docx file: </label>\r\n          <div className=\"custom-file mb-2\">\r\n            <input\r\n              type=\"file\"\r\n              className=\"custom-file-input\"\r\n              id=\"inputGroupFile01\"\r\n              onChange={handleChange}\r\n            />\r\n            <label className=\"custom-file-label\">\r\n              {docFile ? docFile.name : \"Choose file\"}\r\n            </label>\r\n            <li>\r\n              <h6>\r\n                <span className=\"badge badge-danger mt-2\" hidden={!errMessage}>\r\n                  {errMessage}\r\n                </span>\r\n              </h6>\r\n            </li>\r\n          </div>\r\n          <button\r\n            onClick={handleSubmit}\r\n            className=\"btn btn-success form-control mt-3\"\r\n            disabled={isLoading || !docFile}\r\n          >\r\n            {isLoading ? \"Please wait...\" : \"Load Book\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(BookUploadForm);\r\n","import React, { useState } from \"react\";\r\n\r\nconst EditBookScreen = (props) => {\r\n  return <div dangerouslySetInnerHTML={{ __html: props.bookContent }}></div>;\r\n};\r\n\r\nexport default React.memo(EditBookScreen);\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport BookUploadForm from \"./BookUploadForm\";\nimport EditBookScreen from \"./EditBookScreen\";\nimport { HashRouter, Route, Redirect } from \"react-router-dom\";\n\nconst App = () => {\n  const [bookContent, setBookContent] = useState(null);\n\n  const getBookContentFromServer = () => {\n    console.warn(\"Not implemented getBookContentFromServer. Returning null.\");\n    return null;\n  };\n\n  useEffect(() => {\n    const bookContent = getBookContentFromServer();\n    setBookContent(bookContent);\n  }, []);\n\n  return (\n    <HashRouter>\n      <Route exact path=\"/edit\">\n        <EditBookScreen bookContent={bookContent} />\n      </Route>\n      <Route exact path=\"/upload\">\n        <BookUploadForm setBookContent={setBookContent} />\n      </Route>\n      <Redirect exact from=\"/\" to={bookContent ? \"/edit\" : \"/upload\"} />\n    </HashRouter>\n  );\n};\n\nexport default React.memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"container-fluid BookEditorContainer\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}